{
	"info": {
		"_postman_id": "fb391cb8-ccb4-4b44-b9c6-73d4886f5239",
		"name": "Trade Journal Entries Test Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9011736"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "Success SignIn As Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.collectionVariables.set(\"access-token-admin\", response.accessToken);\r",
									"\r",
									"\tpm.collectionVariables.set(\"refresh-token-admin\", response.refreshToken);\r",
									"    \r",
									"\tpm.expect(response.accessToken).not.equal(null);\r",
									"\r",
									"\tpm.expect(response.refreshToken).not.equal(null);\r",
									"\r",
									"    pm.expect(response.user).to.equal('admin');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{admin-email}}\",\r\n  \"password\": \"{{admin-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/auth/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"auth",
								"signin"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SignUp New User",
			"item": [
				{
					"name": "Success SignUp",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"company-name\", getCompanyName());\r",
									"pm.collectionVariables.set(\"first-name\", pm.collectionVariables.replaceIn(\"{{$randomFirstName}}\"));\r",
									"pm.collectionVariables.set(\"last-name\", pm.collectionVariables.replaceIn(\"{{$randomLastName}}\"));\r",
									"pm.collectionVariables.set(\"user-name\", gerUserName());\r",
									"pm.collectionVariables.set(\"user-email\", gerUserEmail());\r",
									"\r",
									"function getCompanyName() {\r",
									"     const companyName = pm.collectionVariables.replaceIn(\"{{$randomCompanyName}}\");\r",
									"     const companySuffix = pm.collectionVariables.replaceIn(\"{{$randomCompanySuffix}}\");\r",
									"     return companyName + ' ' + companySuffix;\r",
									"}\r",
									"\r",
									"function gerUserName() {\r",
									"    const firstName = pm.collectionVariables.get(\"first-name\");\r",
									"    const lastName = pm.collectionVariables.get(\"last-name\");\r",
									"    return (firstName + lastName).toLowerCase();\r",
									"}\r",
									"\r",
									"function gerUserEmail() {\r",
									"    const userName = gerUserName();\r",
									"    return userName + '@mail.com';\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.email).to.equal(pm.collectionVariables.get(\"user-email\"));\r",
									"\r",
									"\tpm.expect(response.enabled).to.equal(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"companyName\": \"{{company-name}}\",\r\n    \"firstName\": \"{{first-name}}\",\r\n    \"lastName\": \"{{last-name}}\",\r\n    \"userName\": \"{{user-name}}\",\r\n    \"email\": \"{{user-email}}\",\r\n    \"password\": \"{{user-password}}\",\r\n    \"confirmPassword\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/auth/signup",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Verification hash for Registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json()[0];\r",
									"\r",
									"    pm.expect(response.email).to.equal(pm.collectionVariables.get(\"user-email\"));\r",
									"\r",
									"\tpm.expect(response.type).to.equal(\"REGISTRATION\");\r",
									"\r",
									"\tpm.expect(response.status).to.equal(\"PENDING\");\r",
									"\r",
									"\tpm.expect(response.hash).not.equal(null);\r",
									"\r",
									"\tpm.collectionVariables.set(\"user-verification-hash\", response.hash)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/verifications/{{user-email}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"verifications",
								"{{user-email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{authentication-api}}/auth/verify?hash={{user-verification-hash}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"auth",
								"verify"
							],
							"query": [
								{
									"key": "hash",
									"value": "{{user-verification-hash}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Success SignIn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.collectionVariables.set(\"access-token\", response.accessToken);\r",
									"\r",
									"\tpm.collectionVariables.set(\"refresh-token\", response.refreshToken);\r",
									"    \r",
									"\tpm.expect(response.accessToken).not.equal(null);\r",
									"\r",
									"\tpm.expect(response.refreshToken).not.equal(null);\r",
									"\r",
									"    pm.expect(response.user).to.equal(pm.collectionVariables.get(\"user-name\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{user-email}}\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/auth/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"auth",
								"signin"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Journals",
			"item": [
				{
					"name": "Create a Journal",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"pm.collectionVariables.set(\"journal-date\", moment().format(\"YYYY-MM-DD HH:mm:ss\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"\tpm.expect(response.name).to.equal(\"shares-journal\");\r",
									"\tpm.expect(response.currency).to.equal(\"DOLLAR\");\r",
									"\tpm.expect(response.startJournal).to.equal(pm.collectionVariables.get(\"journal-date\"));\r",
									"\r",
									"\tpm.collectionVariables.set(\"journal-id\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"shares-journal\",\r\n\t\"startBalance\": 15000.00,\r\n\t\"startJournal\": \"{{journal-date}}\",\r\n\t\"currency\":\"DOLLAR\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/journals",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Journal",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"\tpm.expect(response.name).to.equal(\"shares-journal\");\r",
									"\tpm.expect(response.currency).to.equal(\"DOLLAR\");\r",
									"\tpm.expect(response.startJournal).to.equal(pm.collectionVariables.get(\"journal-date\"));\r",
									"\r",
									"\tpm.collectionVariables.set(\"journal-id\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Journals",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.length).to.equal(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Journal Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.currency).to.equal(\"DOLLAR\");\r",
									"\tpm.expect(response.startJournal).to.equal(pm.collectionVariables.get(\"journal-date\"));\r",
									"\tpm.expect(response.startBalance).to.equal(15000.00);\r",
									"\r",
									"\tpm.expect(response.accountBalance).to.equal(15000.00);\r",
									"\tpm.expect(response.closedPositions).to.equal(0.00);\r",
									"\tpm.expect(response.deposits).to.equal(0.00);\r",
									"\tpm.expect(response.taxes).to.equal(0.00);\r",
									"\tpm.expect(response.withdrawals).to.equal(0.00);\r",
									"\tpm.expect(response.available).to.equal(15000.00);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/balance",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"balance"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Entries",
			"item": [
				{
					"name": "Create a Trade Entry MSFT LONG 3x 244,01 10 Days ago Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const entry = \"entry1-\";\r",
									"pm.collectionVariables.set(entry + \"graph\", randoGraph());\r",
									"pm.collectionVariables.set(entry + \"measure\", _.random(1, 10, false));\r",
									"\r",
									"function randoGraph() {\r",
									"\tvar textArray = ['CANDLESTICK','RENKO','KAGI','LINE'];\r",
									"\tvar randomNumber = Math.floor(Math.random()*textArray.length);\r",
									"\treturn  textArray[randomNumber];\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"\tpm.collectionVariables.set(\"entry1-id\", response.id);\r",
									"\r",
									"\tpm.expect(response.price).to.eql(244.01);\r",
									"\tpm.expect(response.size).to.eql(3);\r",
									"\tpm.expect(response.accountRisked * 100 ).to.eql(4.88);\r",
									"\tpm.expect(response.plannedRR).to.eql(-1.00);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"date\": \"2022-12-30 17:00:00\",\r\n\t\"symbol\": \"MSFT\",\r\n\t\"direction\": \"LONG\",\r\n\t\"price\": 244.01,\r\n\t\"size\": 3,\r\n\t\"graphType\": \"{{entry1-graph}}\",\r\n\t\"graphMeasure\": {{entry1-measure}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/trade",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"trade"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Journal Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.currency).to.equal(\"DOLLAR\");\r",
									"\tpm.expect(response.startJournal).to.equal(pm.collectionVariables.get(\"journal-date\"));\r",
									"\tpm.expect(response.startBalance).to.equal(15000.00);\r",
									"\r",
									"\tpm.expect(response.accountBalance).to.equal(15000.00);\r",
									"\tpm.expect(response.closedPositions).to.equal(0.00);\r",
									"\tpm.expect(response.deposits).to.equal(0.00);\r",
									"\tpm.expect(response.taxes).to.equal(0.00);\r",
									"\tpm.expect(response.withdrawals).to.equal(0.00);\r",
									"\tpm.expect(response.openedPositions).to.equal(732.03);\r",
									"\tpm.expect(response.available).to.equal(14267.97);\t\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/balance",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"balance"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Trade Entry AMZN  SHORT 5.5 x 99.50 - Costs 2.51 1 Month ago",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const entry = \"entry2-\";\r",
									"\r",
									"pm.collectionVariables.set(entry + \"graph\", randoGraph());\r",
									"pm.collectionVariables.set(entry + \"measure\", _.random(1, 10, false));\r",
									"\r",
									"function randoGraph() {\r",
									"\tvar textArray = ['CANDLESTICK','RENKO','KAGI','LINE'];\r",
									"\tvar randomNumber = Math.floor(Math.random()*textArray.length);\r",
									"\treturn  textArray[randomNumber];\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"\tpm.collectionVariables.set(\"entry2-id\", response.id);\r",
									"\r",
									"\tpm.expect(response.price).to.eql(99.50);\r",
									"\tpm.expect(response.size).to.eql(5.5);\r",
									"\tpm.expect(response.profitPrice).to.eql(90.00);\r",
									"\tpm.expect(response.lossPrice).to.eql(102.50);\r",
									"\tpm.expect(response.costs).to.eql(2.51);\r",
									"\tpm.expect(response.accountRisked * 100 ).to.eql(0.11);\r",
									"\tpm.expect(response.plannedRR).to.eql(3.17);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"date\": \"2023-02-28 09:53:26\",\r\n\t\"symbol\": \"AMZN\",\r\n\t\"direction\": \"SHORT\",\r\n\t\"price\": 99.50,\r\n\t\"size\": 5.5,\r\n\t\"profitPrice\": 90.00,\r\n\t\"lossPrice\": 102.50,\r\n\t\"costs\": 2.51,\r\n\t\"graphType\": \"{{entry2-graph}}\",\r\n\t\"graphMeasure\": {{entry2-measure}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/trade",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"trade"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Journal Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.currency).to.equal(\"DOLLAR\");\r",
									"\tpm.expect(response.startJournal).to.equal(pm.collectionVariables.get(\"journal-date\"));\r",
									"\tpm.expect(response.startBalance).to.equal(15000.00);\r",
									"\r",
									"\tpm.expect(response.accountBalance).to.equal(15000.00);\r",
									"\tpm.expect(response.closedPositions).to.equal(0.00);\r",
									"\tpm.expect(response.deposits).to.equal(0.00);\r",
									"\tpm.expect(response.taxes).to.equal(0.00);\r",
									"\tpm.expect(response.withdrawals).to.equal(0.00);\r",
									"\tpm.expect(response.openedPositions).to.equal(1279.28);\r",
									"\tpm.expect(response.available).to.equal(13720.72);\t\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/balance",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"balance"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Trade Entry SP500 LONG 2x 3967.85 Today",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const entry = \"entry3-\";\r",
									"pm.collectionVariables.set(entry + \"graph\", randoGraph());\r",
									"pm.collectionVariables.set(entry + \"measure\", _.random(1, 10, false));\r",
									"\r",
									"function randoGraph() {\r",
									"\tvar textArray = ['CANDLESTICK','RENKO','KAGI','LINE'];\r",
									"\tvar randomNumber = Math.floor(Math.random()*textArray.length);\r",
									"\treturn  textArray[randomNumber];\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"\tpm.collectionVariables.set(\"entry3-id\", response.id);\r",
									"\t\r",
									"\tpm.expect(response.price).to.eql(3967.85);\r",
									"\tpm.expect(response.size).to.eql(2);\r",
									"\tpm.expect(response.profitPrice).to.eql(4150.00);\r",
									"\tpm.expect(response.lossPrice).to.eql(3900.00);\r",
									"\tpm.expect(parseFloat( (response.accountRisked * 100).toFixed(2) )).to.eql(0.9);\r",
									"\tpm.expect(response.plannedRR).to.eql(2.68);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"date\": \"2023-03-03 08:45:00\",\r\n\t\"symbol\": \"SP500\",\r\n\t\"direction\": \"LONG\",\r\n\t\"price\": 3967.85,\r\n\t\"size\": 2,\r\n\t\"profitPrice\": 4150.00,\r\n\t\"lossPrice\": 3900.00,\r\n\t\"graphType\": \"{{entry3-graph}}\",\r\n\t\"graphMeasure\": {{entry2-measure}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/trade",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"trade"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Journal Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.currency).to.equal(\"DOLLAR\");\r",
									"\tpm.expect(response.startJournal).to.equal(pm.collectionVariables.get(\"journal-date\"));\r",
									"\tpm.expect(response.startBalance).to.equal(15000.00);\r",
									"\r",
									"\tpm.expect(response.accountBalance).to.equal(15000.00);\r",
									"\tpm.expect(response.closedPositions).to.equal(0.00);\r",
									"\tpm.expect(response.deposits).to.equal(0.00);\r",
									"\tpm.expect(response.taxes).to.equal(0.00);\r",
									"\tpm.expect(response.withdrawals).to.equal(0.00);\r",
									"\tpm.expect(response.openedPositions).to.equal(9214.98);\r",
									"\tpm.expect(response.available).to.equal(5785.02);\t\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/balance",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"balance"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Deposit  Entry 2000.00",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"pm.collectionVariables.set(\"entry-date\", moment().format(\"YYYY-MM-DD HH:mm:ss\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"\r",
									"\tpm.expect(response.netResult).to.eql(2000.00);\r",
									"\tpm.expect(response.accountChange * 100).to.eql(13.33);\r",
									"\tpm.expect(response.accountBalance).to.eql(17000.00);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"date\": \"{{entry-date}}\",\r\n\t\"price\": 2000.00\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/deposit",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Journal Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.currency).to.equal(\"DOLLAR\");\r",
									"\tpm.expect(response.startJournal).to.equal(pm.collectionVariables.get(\"journal-date\"));\r",
									"\tpm.expect(response.startBalance).to.equal(15000.00);\r",
									"\r",
									"\tpm.expect(response.accountBalance).to.equal(17000.00);\r",
									"\tpm.expect(response.closedPositions).to.equal(0.00);\r",
									"\tpm.expect(response.deposits).to.equal(2000.00);\r",
									"\tpm.expect(response.taxes).to.equal(0.00);\r",
									"\tpm.expect(response.withdrawals).to.equal(0.00);\r",
									"\tpm.expect(response.openedPositions).to.equal(9214.98);\r",
									"\tpm.expect(response.available).to.equal(7785.02);\t\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/balance",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"balance"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Taxes Entry 150.50",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"pm.collectionVariables.set(\"entry-date\", moment().format(\"YYYY-MM-DD HH:mm:ss\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"\r",
									"\tpm.expect(response.netResult).to.eql(-150.50);\r",
									"\tpm.expect(response.accountChange * 100).to.eql(-0.89);\r",
									"\tpm.expect(response.accountBalance).to.eql(16849.50);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"date\": \"{{entry-date}}\",\r\n\t\"price\": 150.50\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/taxes",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"taxes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Journal Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.currency).to.equal(\"DOLLAR\");\r",
									"\tpm.expect(response.startJournal).to.equal(pm.collectionVariables.get(\"journal-date\"));\r",
									"\tpm.expect(response.startBalance).to.equal(15000.00);\r",
									"\r",
									"\tpm.expect(response.accountBalance).to.equal(16849.50);\r",
									"\tpm.expect(response.closedPositions).to.equal(0.00);\r",
									"\tpm.expect(response.deposits).to.equal(2000.00);\r",
									"\tpm.expect(response.taxes).to.equal(150.50);\r",
									"\tpm.expect(response.withdrawals).to.equal(0.00);\r",
									"\tpm.expect(response.openedPositions).to.equal(9214.98);\r",
									"\tpm.expect(response.available).to.equal(7634.52);\t\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/balance",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"balance"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Withdrawal Entry 5000.00",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"pm.collectionVariables.set(\"entry-date\", moment().format(\"YYYY-MM-DD HH:mm:ss\"));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"\r",
									"\tpm.expect(response.netResult).to.eql(-5000.000);\r",
									"\tpm.expect(response.accountChange * 100).to.eql(-29.67);\r",
									"\tpm.expect(response.accountBalance).to.eql(11849.50);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"date\": \"{{entry-date}}\",\r\n\t\"price\": 5000.00\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/withdrawal",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"withdrawal"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Journal Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.currency).to.equal(\"DOLLAR\");\r",
									"\tpm.expect(response.startJournal).to.equal(pm.collectionVariables.get(\"journal-date\"));\r",
									"\tpm.expect(response.startBalance).to.equal(15000.00);\r",
									"\r",
									"\tpm.expect(response.accountBalance).to.equal(11849.50);\r",
									"\tpm.expect(response.closedPositions).to.equal(0.00);\r",
									"\tpm.expect(response.deposits).to.equal(2000.00);\r",
									"\tpm.expect(response.taxes).to.equal(150.50);\r",
									"\tpm.expect(response.withdrawals).to.equal(5000.00);\r",
									"\tpm.expect(response.openedPositions).to.equal(9214.98);\r",
									"\tpm.expect(response.available).to.equal(2634.52);\t\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/balance",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"balance"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Entries",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.content.length).to.equal(6);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Trade Entry MSFT LONG 3x 244,01 with Profit, Loss and Cost",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.id).to.eql(pm.collectionVariables.get(\"entry1-id\"));\r",
									"\t\r",
									"\tpm.expect(response.symbol).to.eql('MSFT');\r",
									"\tpm.expect(response.graphType).to.eql(pm.collectionVariables.get('entry1-graph'));\r",
									"\r",
									"\tpm.expect(response.price).to.eql(244.01);\r",
									"\tpm.expect(response.size).to.eql(3);\r",
									"\tpm.expect(response.accountRisked * 100 ).to.eql(0.31);\r",
									"\tpm.expect(response.plannedRR).to.eql(3.00);\r",
									"\tpm.expect(response.profitPrice).to.eql(280.61);\r",
									"\tpm.expect(response.lossPrice).to.eql(231.80);\r",
									"\tpm.expect(response.costs).to.eql(1.23);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"date\": \"2022-12-30 17:00:00\",\r\n\t\"symbol\": \"MSFT\",\r\n\t\"direction\": \"LONG\",\r\n\t\"price\": 244.01,\r\n\t\"size\": 3,\r\n\t\"graphType\": \"{{entry1-graph}}\",\r\n\t\"graphMeasure\": {{entry1-measure}},\r\n\t\"profitPrice\": 280.61,\r\n\t\"lossPrice\": 231.80,\r\n\t\"costs\": 1.23\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/trade/{{entry1-id}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"trade",
								"{{entry1-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Entries",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.content.length).to.equal(6);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Count open trades",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.trades).to.equal(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/trade/open",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"trade",
								"open"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add MSFT Image",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"\tpm.collectionVariables.set(\"msft-image1-id\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/Allan/developer/trading-journal/trading-journal-entry/postman/image.jpg"
								}
							]
						},
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/{{entry1-id}}/image",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"{{entry1-id}}",
								"image"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add SP500 Fisrt Image",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"\tpm.collectionVariables.set(\"sp500-image1-id\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/Allan/developer/trading-journal/trading-journal-entry/postman/image.jpg"
								}
							]
						},
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/{{entry3-id}}/image",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"{{entry3-id}}",
								"image"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add SP500 Second Image",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"\tpm.collectionVariables.set(\"sp500-image2-id\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/Allan/developer/trading-journal/trading-journal-entry/postman/image.jpg"
								}
							]
						},
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/{{entry3-id}}/image",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"{{entry3-id}}",
								"image"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MSFT Images",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.length).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/{{entry1-id}}/images",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"{{entry1-id}}",
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get SP500 Images",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.length).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/{{entry3-id}}/images",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"{{entry3-id}}",
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get AMZN Images",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/{{entry2-id}}/images",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"{{entry2-id}}",
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete MSFT Image",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/{{entry1-id}}/image/{{msft-image1-id}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"{{entry1-id}}",
								"image",
								"{{msft-image1-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MSFT Images",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/{{entry1-id}}/images",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"{{entry1-id}}",
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete One SP500 Image",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/{{entry3-id}}/image/{{sp500-image2-id}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"{{entry3-id}}",
								"image",
								"{{sp500-image2-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get SP500 Images",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.length).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/{{entry3-id}}/images",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"{{entry3-id}}",
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exit Trade  MSFT LONG winning at 280.61",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.id).to.eql(pm.collectionVariables.get(\"entry1-id\"));\r",
									"\r",
									"\tpm.expect(response.grossResult).to.eql(109.80);\r",
									"\tpm.expect(response.netResult).to.eql(108.57);\r",
									"\tpm.expect(parseFloat( (response.accountChange * 100).toFixed(2) )).to.eql(0.92);\r",
									"\tpm.expect(response.accountBalance).to.eql(11958.07);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"exitPrice\": 280.61,\r\n\t\"exitDate\": \"2022-12-31 16:00:00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/trade/{{entry1-id}}/close",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"trade",
								"{{entry1-id}}",
								"close"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Journal Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.currency).to.equal(\"DOLLAR\");\r",
									"\tpm.expect(response.startJournal).to.equal(pm.collectionVariables.get(\"journal-date\"));\r",
									"\tpm.expect(response.startBalance).to.equal(15000.00);\r",
									"\r",
									"\tpm.expect(response.accountBalance).to.equal(11958.07);\r",
									"\tpm.expect(response.closedPositions).to.equal(108.57);\r",
									"\tpm.expect(response.deposits).to.equal(2000.00);\r",
									"\tpm.expect(response.taxes).to.equal(150.50);\r",
									"\tpm.expect(response.withdrawals).to.equal(5000.00);\r",
									"\tpm.expect(response.openedPositions).to.equal(8482.95);\r",
									"\tpm.expect(response.available).to.equal(3475.12);\t\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/balance",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"balance"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All OPEN Return 2 Trade",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.content.length).to.equal(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries?status=OPEN&type=TRADE",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries"
							],
							"query": [
								{
									"key": "status",
									"value": "OPEN"
								},
								{
									"key": "type",
									"value": "TRADE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Closed Return 1 Trade",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.content.length).to.equal(1);\r",
									"\tpm.expect(response.content[0].symbol).to.equal('MSFT');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries?status=CLOSED&type=TRADE",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries"
							],
							"query": [
								{
									"key": "status",
									"value": "CLOSED"
								},
								{
									"key": "type",
									"value": "TRADE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exit Trade AMZN  SHORT losing at 102.50",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.id).to.eql(pm.collectionVariables.get(\"entry2-id\"));\r",
									"\r",
									"\tpm.expect(response.grossResult).to.eql(-16.50);\r",
									"\tpm.expect(response.netResult).to.eql(-19.01);\r",
									"\tpm.expect(response.accountBalance).to.eql(11939.06);\r",
									"\tpm.expect(parseFloat( (response.accountChange * 100).toFixed(2) )).to.eql(-0.16);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"exitPrice\": 102.50,\r\n\t\"exitDate\": \"2023-02-28 18:53:26\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/trade/{{entry2-id}}/close",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"trade",
								"{{entry2-id}}",
								"close"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Journal Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.currency).to.equal(\"DOLLAR\");\r",
									"\tpm.expect(response.startJournal).to.equal(pm.collectionVariables.get(\"journal-date\"));\r",
									"\tpm.expect(response.startBalance).to.equal(15000.00);\r",
									"\r",
									"\tpm.expect(response.accountBalance).to.equal(11939.06);\r",
									"\tpm.expect(response.closedPositions).to.equal(89.56);\r",
									"\tpm.expect(response.deposits).to.equal(2000.00);\r",
									"\tpm.expect(response.taxes).to.equal(150.50);\r",
									"\tpm.expect(response.withdrawals).to.equal(5000.00);\r",
									"\tpm.expect(response.openedPositions).to.equal(7935.70);\r",
									"\tpm.expect(response.available).to.equal(4003.36);\t\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/balance",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"balance"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exit Trade SP500 LONG winning at  4150.00",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"pm.collectionVariables.set(\"entry3-exitDate\", moment().format(\"YYYY-MM-DD HH:mm:ss\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.id).to.eql(pm.collectionVariables.get(\"entry3-id\"));\r",
									"\r",
									"\tpm.expect(response.grossResult).to.eql(364.3);\r",
									"\tpm.expect(response.netResult).to.eql(364.3);\r",
									"\tpm.expect(response.accountBalance).to.eql(12303.36);\r",
									"\tpm.expect(parseFloat( (response.accountChange * 100).toFixed(2) )).to.eql(3.05);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"exitPrice\": 4150.00,\r\n\t\"exitDate\": \"2023-03-03 11:43:00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/trade/{{entry3-id}}/close",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"trade",
								"{{entry3-id}}",
								"close"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Journal Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.currency).to.equal(\"DOLLAR\");\r",
									"\tpm.expect(response.startBalance).to.equal(15000.00);\r",
									"\r",
									"\tpm.expect(response.accountBalance).to.equal(12303.36);\r",
									"\tpm.expect(response.closedPositions).to.equal(453.86);\r",
									"\tpm.expect(response.deposits).to.equal(2000.00);\r",
									"\tpm.expect(response.taxes).to.equal(150.50);\r",
									"\tpm.expect(response.withdrawals).to.equal(5000.00);\r",
									"\tpm.expect(response.openedPositions).to.equal(0.00);\r",
									"\tpm.expect(response.available).to.equal(12303.36);\t\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/balance",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"balance"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All by MSFT Symbol return 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.content.length).to.equal(1);\r",
									"\tpm.expect(response.content[0].symbol).to.equal('MSFT');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries?symbol=MSFT",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries"
							],
							"query": [
								{
									"key": "symbol",
									"value": "MSFT"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All DEPOSIT return 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.content.length).to.equal(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries?type=DEPOSIT",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries"
							],
							"query": [
								{
									"key": "type",
									"value": "DEPOSIT"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Count open trades",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.trades).to.equal(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/trade/open",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"trade",
								"open"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all symbols",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.length).to.equal(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/trade/symbols",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"trade",
								"symbols"
							]
						}
					},
					"response": []
				},
				{
					"name": "Aggregate Times by day",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.items.length).to.equal(3);\r",
									"\r",
									"\tpm.expect(response.total).to.equal(3);\r",
									"\r",
									"\tpm.expect(response.items[0].group).to.equal('2023-03');\r",
									"\tpm.expect(response.items[0].items.length).to.equal(1);\r",
									"\tpm.expect(response.items[0].items[0].count).to.equal(1);\r",
									"\tpm.expect(response.items[0].items[0].group).to.equal('2023-03-03');\r",
									"\tpm.expect(response.items[0].items[0].result).to.equal(364.3);\r",
									"\r",
									"\tpm.expect(response.items[1].group).to.equal('2023-02');\r",
									"\tpm.expect(response.items[1].items.length).to.equal(1);\r",
									"\tpm.expect(response.items[1].items[0].count).to.equal(1);\r",
									"\tpm.expect(response.items[1].items[0].group).to.equal('2023-02-28');\r",
									"\tpm.expect(response.items[1].items[0].result).to.equal(-19.01);\r",
									"\r",
									"\tpm.expect(response.items[2].group).to.equal('2022-12');\r",
									"\tpm.expect(response.items[2].items.length).to.equal(1);\r",
									"\tpm.expect(response.items[2].items[0].count).to.equal(1);\r",
									"\tpm.expect(response.items[2].items[0].group).to.equal('2022-12-30');\r",
									"\tpm.expect(response.items[2].items[0].result).to.equal(108.57);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/trade/aggregate/time?aggregation=DAY&page=0&size=10",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"trade",
								"aggregate",
								"time"
							],
							"query": [
								{
									"key": "aggregation",
									"value": "DAY"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Aggregate trades by week",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.items.length).to.equal(2);\r",
									"\tpm.expect(response.total).to.equal(2);\r",
									"\r",
									"\tpm.expect(response.items[0].group).to.equal('2023-03');\r",
									"\tpm.expect(response.items[0].items[0].count).to.equal(2);\r",
									"\tpm.expect(response.items[0].items[0].group).to.equal('2023-09');\r",
									"\tpm.expect(response.items[0].items[0].result).to.equal(345.29);\r",
									"\r",
									"\tpm.expect(response.items[1].group).to.equal('2022-12');\r",
									"\tpm.expect(response.items[1].items[0].count).to.equal(1);\r",
									"\tpm.expect(response.items[1].items[0].group).to.equal('2022-52');\r",
									"\tpm.expect(response.items[1].items[0].result).to.equal(108.57);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/trade/aggregate/time?aggregation=WEEK&page=0&size=10",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"trade",
								"aggregate",
								"time"
							],
							"query": [
								{
									"key": "aggregation",
									"value": "WEEK"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Aggregate trades by month",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.items.length).to.equal(2);\r",
									"\tpm.expect(response.total).to.equal(3);\r",
									"\r",
									"\r",
									"\tpm.expect(response.items[0].group).to.equal('2023');\r",
									"\tpm.expect(response.items[0].items.length).to.equal(2);\r",
									"\tpm.expect(response.items[0].items[0].count).to.equal(1);\r",
									"\tpm.expect(response.items[0].items[0].group).to.equal('2023-03');\r",
									"\tpm.expect(response.items[0].items[0].result).to.equal(364.3);\r",
									"\tpm.expect(response.items[0].items[1].count).to.equal(1);\r",
									"\tpm.expect(response.items[0].items[1].group).to.equal('2023-02');\r",
									"\tpm.expect(response.items[0].items[1].result).to.equal( -19.01);\r",
									"\r",
									"\r",
									"\tpm.expect(response.items[1].group).to.equal('2022');\r",
									"\tpm.expect(response.items[1].items.length).to.equal(1);\r",
									"\tpm.expect(response.items[1].items[0].count).to.equal(1);\r",
									"\tpm.expect(response.items[1].items[0].group).to.equal('2022-12');\r",
									"\tpm.expect(response.items[1].items[0].result).to.equal(108.57);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/trade/aggregate/time?aggregation=MONTH&page=0&size=10",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"trade",
								"aggregate",
								"time"
							],
							"query": [
								{
									"key": "aggregation",
									"value": "MONTH"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Aggregate trades Within a Day",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.length).to.equal(1);\r",
									"\tpm.expect(response[0].count).to.equal(1);\r",
									"\tpm.expect(response[0].group).to.equal(\"2023-03-03\");\r",
									"\tpm.expect(response[0].items.length).to.equal(1);\r",
									"\r",
									"\tpm.expect(response[0].items[0].tradeId).not.null;\r",
									"\tpm.expect(response[0].items[0].symbol).to.equal(\"SP500\")\r",
									"\tpm.expect(response[0].items[0].netResult).to.equal(364.30)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/trade/aggregate/trade?from=2023-03-03 00:00:00&until=2023-03-03 23:59:59",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"trade",
								"aggregate",
								"trade"
							],
							"query": [
								{
									"key": "from",
									"value": "2023-03-03 00:00:00"
								},
								{
									"key": "until",
									"value": "2023-03-03 23:59:59"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Aggregate trades Within a Week",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.length).to.equal(2);\r",
									"\r",
									"\tpm.expect(response[0].count).to.equal(1);\r",
									"\tpm.expect(response[0].group).to.equal(\"2023-03-03\");\r",
									"\tpm.expect(response[0].items.length).to.equal(1);\r",
									"\tpm.expect(response[0].items[0].tradeId).not.null;\r",
									"\tpm.expect(response[0].items[0].symbol).to.equal(\"SP500\")\r",
									"\tpm.expect(response[0].items[0].netResult).to.equal(364.30)\r",
									"\r",
									"\tpm.expect(response[1].count).to.equal(1);\r",
									"\tpm.expect(response[1].group).to.equal(\"2023-02-28\");\r",
									"\tpm.expect(response[1].items.length).to.equal(1);\r",
									"\tpm.expect(response[1].items[0].tradeId).not.null;\r",
									"\tpm.expect(response[1].items[0].symbol).to.equal(\"AMZN\")\r",
									"\tpm.expect(response[1].items[0].netResult).to.equal(-19.01)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/trade/aggregate/trade?from=2023-02-27 00:00:00&until=2023-03-05 23:59:59",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"trade",
								"aggregate",
								"trade"
							],
							"query": [
								{
									"key": "from",
									"value": "2023-02-27 00:00:00"
								},
								{
									"key": "until",
									"value": "2023-03-05 23:59:59"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Aggregate trades Within a Month",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.length).to.equal(1);\r",
									"\r",
									"\tpm.expect(response[0].count).to.equal(1);\r",
									"\tpm.expect(response[0].group).to.equal(\"2022-12-30\");\r",
									"\tpm.expect(response[0].items.length).to.equal(1);\r",
									"\tpm.expect(response[0].items[0].tradeId).not.null;\r",
									"\tpm.expect(response[0].items[0].symbol).to.equal(\"MSFT\")\r",
									"\tpm.expect(response[0].items[0].netResult).to.equal( 108.57)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/trade/aggregate/trade?from=2022-12-01 00:00:00&until=2022-12-31 23:59:59",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"trade",
								"aggregate",
								"trade"
							],
							"query": [
								{
									"key": "from",
									"value": "2022-12-01 00:00:00"
								},
								{
									"key": "until",
									"value": "2022-12-31 23:59:59"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Entry 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"pm.collectionVariables.set(\"entry1-exitDate\", moment().format(\"YYYY-MM-DD HH:mm:ss\"));\r",
									"\r",
									"const profitPrice = parseFloat(pm.collectionVariables.get(\"entry1-profitPrice\")).toFixed(2);\r",
									"const exitPrice = profitPrice;\r",
									"\r",
									"pm.collectionVariables.set(\"entry1-exitPrice\", exitPrice);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"\r",
									"\tconst entryNetResult = parseFloat(pm.collectionVariables.get(\"entry1-netResult\"));\r",
									"\r",
									"\tconst accountBalance = parseFloat(pm.collectionVariables.get(\"accountBalance\")) - parseFloat(entryNetResult);\r",
									"\tconst closedPositions = parseFloat(pm.collectionVariables.get(\"closedPositions\")) - parseFloat(entryNetResult);\r",
									"\r",
									"\tpm.collectionVariables.set(\"accountBalance\", accountBalance.toFixed(2));\r",
									"\tpm.collectionVariables.set(\"closedPositions\", closedPositions.toFixed(2));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/{{entry1-id}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"{{entry1-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Entries",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.content.length).to.equal(5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Journal Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.currency).to.equal(\"DOLLAR\");\r",
									"\tpm.expect(response.startJournal).to.equal(pm.collectionVariables.get(\"journal-date\"));\r",
									"\tpm.expect(response.startBalance).to.equal(15000.00);\r",
									"\r",
									"\tpm.expect(response.accountBalance).to.equal(12194.79);\r",
									"\tpm.expect(response.closedPositions).to.equal(345.29);\r",
									"\tpm.expect(response.deposits).to.equal(2000.00);\r",
									"\tpm.expect(response.taxes).to.equal(150.50);\r",
									"\tpm.expect(response.withdrawals).to.equal(5000.00);\r",
									"\tpm.expect(response.openedPositions).to.equal(0.00);\r",
									"\tpm.expect(response.available).to.equal(12194.79);\t\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/balance",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"balance"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Journal",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Strategies",
			"item": [
				{
					"name": "Create a Journal",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"pm.collectionVariables.set(\"journal-date\", moment().format(\"YYYY-MM-DD HH:mm:ss\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"\tpm.expect(response.name).to.equal(\"shares-journal\");\r",
									"\tpm.expect(response.currency).to.equal(\"DOLLAR\");\r",
									"\tpm.expect(response.startJournal).to.equal(pm.collectionVariables.get(\"journal-date\"));\r",
									"\r",
									"\tpm.collectionVariables.set(\"journal-id\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"shares-journal\",\r\n\t\"startBalance\": 15000.00,\r\n\t\"startJournal\": \"{{journal-date}}\",\r\n\t\"currency\":\"DOLLAR\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/journals",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Strategy 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"\tpm.expect(response.name).to.equal(\"strategy-1\");\r",
									"\r",
									"\tpm.collectionVariables.set(\"strategy-1\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"strategy-1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/strategies",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"strategies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Strategy 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"\tpm.expect(response.name).to.equal(\"strategy-2-new\");\r",
									"\r",
									"\tpm.collectionVariables.set(\"strategy-2\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"strategy-2-new\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/strategies",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"strategies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Strategies return 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.content.length).to.equal(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/strategies",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"strategies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Strategy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.id).to.equal(pm.collectionVariables.get(\"strategy-2\"));\r",
									"\tpm.expect(response.name).to.equal(\"strategy-2\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"id\":\"{{strategy-2}}\",\r\n\t\"name\": \"strategy-2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/strategies",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"strategies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Strategy 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.id).to.equal(pm.collectionVariables.get(\"strategy-1\"));\r",
									"\tpm.expect(response.name).to.equal(\"strategy-1\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/strategies/{{strategy-1}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"strategies",
								"{{strategy-1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Strategy 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/strategies/{{strategy-2}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"strategies",
								"{{strategy-2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Strategy not found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"  pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.error).to.equal(\"Strategy not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/strategies/{{strategy-2}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"strategies",
								"{{strategy-2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Strategy not found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"  pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.error).to.equal(\"Strategy not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/strategies/{{strategy-2}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"strategies",
								"{{strategy-2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Strategies return 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.content.length).to.equal(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/strategies",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"strategies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a entry with strategy 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"\tpm.collectionVariables.set(\"entry1-id\", response.id);\r",
									"\r",
									"\tpm.expect(response.strategies.length).to.eql(1);\r",
									"\tpm.expect(response.strategies[0].id).to.eql(pm.collectionVariables.get(\"strategy-1\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"date\": \"2022-12-30 17:00:00\",\r\n\t\"symbol\": \"MSFT\",\r\n\t\"direction\": \"LONG\",\r\n\t\"price\": 244.01,\r\n\t\"size\": 3,\r\n\t\"strategyIds\" :[\"{{strategy-1}}\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/trade",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"trade"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Strategy 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"\tpm.expect(response.name).to.equal(\"strategy-2-new\");\r",
									"\r",
									"\tpm.collectionVariables.set(\"strategy-2\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"strategy-2-new\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/strategies",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"strategies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a entry with Strategy 1 and 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"\r",
									"\tpm.expect(response.strategies.length).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"date\": \"2022-12-30 17:00:00\",\r\n\t\"symbol\": \"SP500\",\r\n\t\"direction\": \"LONG\",\r\n\t\"price\": 244.01,\r\n\t\"size\": 3,\r\n\t\"strategyIds\" :[\"{{strategy-1}}\", \"{{strategy-2}}\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/trade",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"trade"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a entry with Strategy 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"\r",
									"\tpm.expect(response.strategies.length).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"date\": \"2022-12-30 17:00:00\",\r\n\t\"symbol\": \"SP500\",\r\n\t\"direction\": \"LONG\",\r\n\t\"price\": 244.01,\r\n\t\"size\": 3,\r\n\t\"strategyIds\" :[\"{{strategy-2}}\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/trade",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"trade"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update first entry with two  strategies",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"\r",
									"\tpm.expect(response.strategies.length).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"date\": \"2022-12-30 17:00:00\",\r\n\t\"symbol\": \"MSFT\",\r\n\t\"direction\": \"LONG\",\r\n\t\"price\": 244.01,\r\n\t\"size\": 3,\r\n\t\"profitPrice\": 280.61,\r\n\t\"lossPrice\": 231.80,\r\n\t\"costs\": 1.23,\r\n\t\"strategyIds\" :[\"{{strategy-1}}\", \"{{strategy-2}}\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/trade/{{entry1-id}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"trade",
								"{{entry1-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a entry with one invalid strategy id return error",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.error).to.equal(\"Invalid Strategy 6413640af797e679b86feb18\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"date\": \"2022-12-30 17:00:00\",\r\n\t\"symbol\": \"IBOV\",\r\n\t\"direction\": \"LONG\",\r\n\t\"price\": 244.01,\r\n\t\"size\": 3,\r\n\t\"strategyIds\" :[\"{{strategy-1}}\",\"6413640af797e679b86feb18\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/trade",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"trade"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Strategies return 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.content.length).to.equal(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/strategies",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"strategies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update first entry with only strategy 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"\r",
									"\tpm.expect(response.strategies.length).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"date\": \"2022-12-30 17:00:00\",\r\n\t\"symbol\": \"MSFT\",\r\n\t\"direction\": \"LONG\",\r\n\t\"price\": 244.01,\r\n\t\"size\": 3,\r\n\t\"profitPrice\": 280.61,\r\n\t\"lossPrice\": 231.80,\r\n\t\"costs\": 1.23,\r\n\t\"strategyIds\" :[\"{{strategy-1}}\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries/trade/{{entry1-id}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries",
								"trade",
								"{{entry1-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All entries by Strategy 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.content.length).to.equal(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries?strategies={{strategy-1}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries"
							],
							"query": [
								{
									"key": "strategies",
									"value": "{{strategy-1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All entries by Strategy 1 and 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.content.length).to.equal(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries?strategies={{strategy-1}}, {{strategy-2}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries"
							],
							"query": [
								{
									"key": "strategies",
									"value": "{{strategy-1}}, {{strategy-2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All entries by invalid Strategy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.content.length).to.equal(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}/entries?strategies=123123132131",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}",
								"entries"
							],
							"query": [
								{
									"key": "strategies",
									"value": "123123132131"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Strategy 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/strategies/{{strategy-1}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"strategies",
								"{{strategy-1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Strategy 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/strategies/{{strategy-2}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"strategies",
								"{{strategy-2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Journal",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Clean Test",
			"item": [
				{
					"name": "Get  Tenancy by User email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.userLimit).to.eql(1);\r",
									"\tpm.expect(response.userUsage).to.eql(1);\r",
									"\tpm.expect(response.enabled).to.eql(true);\r",
									"\r",
									"\tpm.collectionVariables.set('tenancy-id', response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/tenancies/by-email/{{user-email}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"tenancies",
								"by-email",
								"{{user-email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.totalItems).to.eql(1);\r",
									"\tpm.collectionVariables.set(\"user-id\", response.items[0].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							},
							{
								"key": "tenancy",
								"value": "{{tenancy-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/users",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"users"
							],
							"query": [
								{
									"key": "filter",
									"value": "Allan",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Tenancy User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							},
							{
								"key": "tenancy",
								"value": "{{tenancy-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/users/{{user-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"users",
								"{{user-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Tenancy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/tenancies/{{tenancy-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"tenancies",
								"{{tenancy-id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "access-token-admin",
			"value": ""
		},
		{
			"key": "refresh-token-admin",
			"value": ""
		},
		{
			"key": "company-name",
			"value": ""
		},
		{
			"key": "first-name",
			"value": ""
		},
		{
			"key": "last-name",
			"value": ""
		},
		{
			"key": "user-name",
			"value": ""
		},
		{
			"key": "user-email",
			"value": ""
		},
		{
			"key": "user-verification-hash",
			"value": ""
		},
		{
			"key": "access-token",
			"value": ""
		},
		{
			"key": "refresh-token",
			"value": ""
		},
		{
			"key": "journal-date",
			"value": ""
		},
		{
			"key": "journal-id",
			"value": ""
		},
		{
			"key": "entry1-graph",
			"value": ""
		},
		{
			"key": "entry1-measure",
			"value": ""
		},
		{
			"key": "entry1-id",
			"value": ""
		},
		{
			"key": "msft-image1-id",
			"value": ""
		},
		{
			"key": "entry2-graph",
			"value": ""
		},
		{
			"key": "entry2-measure",
			"value": ""
		},
		{
			"key": "entry2-id",
			"value": ""
		},
		{
			"key": "entry3-graph",
			"value": ""
		},
		{
			"key": "entry3-measure",
			"value": ""
		},
		{
			"key": "entry3-id",
			"value": ""
		},
		{
			"key": "entry-date",
			"value": ""
		},
		{
			"key": "sp500-image1-id",
			"value": ""
		},
		{
			"key": "sp500-image2-id",
			"value": ""
		},
		{
			"key": "entry3-exitDate",
			"value": ""
		},
		{
			"key": "entry1-exitDate",
			"value": ""
		},
		{
			"key": "entry1-exitPrice",
			"value": ""
		},
		{
			"key": "accountBalance",
			"value": ""
		},
		{
			"key": "closedPositions",
			"value": ""
		},
		{
			"key": "strategy-1",
			"value": ""
		},
		{
			"key": "strategy-2",
			"value": ""
		},
		{
			"key": "tenancy-id",
			"value": ""
		},
		{
			"key": "user-id",
			"value": ""
		}
	]
}