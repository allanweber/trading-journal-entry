name: Build and Publish Docker Image - DEV

on:
  workflow_dispatch:
  pull_request:
    branches: [master]

env:
  APP_NAME: trading-journal-entry
  NAMESPACE: trading-journal-tst
  CONTEXT: trading-journal

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      app-version: ${{ steps.build-version.outputs.APP_VERSION }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Build with Maven
        env:
          PASSWORD: ${{ secrets.PACKAGE_TOKEN }}
        run: |
          mvn -B clean package --file pom.xml --settings settings.xml
          echo "APP_VERSION=$(mvn --file pom.xml --settings settings.xml  -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)" >> "$GITHUB_OUTPUT"
        id: build-version
      - uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.COVERAGE_SECRET }}
          files: target/site/jacoco/jacoco.xml
          name: codecov
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: $APP_NAME
          path: target/*.jar

  docker:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: $APP_NAME
          path: target
      - name: Docker Login
        run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASS }}
      - name: Docker Build Version DEV
        run: docker build -t allanweber/$APP_NAME:${{needs.build.outputs.app-version}} -f docker/Dockerfile .
      - name: Build and Push Version
        run: docker push allanweber/$APP_NAME:${{needs.build.outputs.app-version}}
      - name: Delete Artifact
        uses: geekyeggo/delete-artifact@v2
        with:
          name: $APP_NAME

#  deploy:
#    name: Deploy on TST
#    runs-on: ubuntu-latest
#    needs: [build, docker]
#    steps:
#      - name: Deploy Image
#        uses: actions-hub/kubectl@master
#        env:
#          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
#          KUBE_CONTEXT: ${{ env.CONTEXT }}
#        with:
#          args: set image deployment ${{ env.APP_NAME }} ${{ env.APP_NAME }}=allanweber/${{ env.APP_NAME }}:${{needs.build.outputs.app-version}} -n ${{ env.NAMESPACE }} --record=true
#      - name: Check Image Rollout
#        uses: actions-hub/kubectl@master
#        env:
#          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
#          KUBE_CONTEXT: ${{ env.CONTEXT }}
#        with:
#          args: rollout status deployment/${{ env.APP_NAME }} -n ${{ env.NAMESPACE }}
#
#  test:
#    name: Test Latest Deploy
#    runs-on: ubuntu-latest
#    needs: [ build, docker, deploy ]
#    steps:
#      - uses: actions/checkout@v3
#      - name: Install Node
#        uses: actions/setup-node@v3
#      - name: Install Newman
#        run: |
#          npm install -g newman
#          npm install -g newman-reporter-htmlextra
#      - name: Make Directory for results
#        run: mkdir -p testResults
#      - name: Run Postman collection
#        run: |
#          newman run postman/TJE.postman_collection.json --insecure -e postman/TJE_test.postman_environment.json -r htmlextra --reporter-htmlextra-export testResults/htmlreport.html --reporter-htmlextra-darkTheme  > testResults/runreport1.html
#      - name: Output the run Details
#        uses: actions/upload-artifact@v3
#        with:
#          name: RunReports
#          path: testResults