package com.trading.journal.entry;

import com.allanweber.jwttoken.data.AccessTokenInfo;
import com.allanweber.jwttoken.data.JwtProperties;
import com.trading.journal.entry.entries.*;
import com.trading.journal.entry.entries.trade.CloseTrade;
import com.trading.journal.entry.entries.trade.Trade;
import com.trading.journal.entry.entries.trade.TradeService;
import com.trading.journal.entry.queries.impl.MultiTenancyPageableRepositoryImpl;
import lombok.RequiredArgsConstructor;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.event.EventListener;
import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

import static java.util.Arrays.asList;

@SpringBootApplication
@EnableConfigurationProperties(JwtProperties.class)
@EnableMongoRepositories(repositoryBaseClass = MultiTenancyPageableRepositoryImpl.class)
@RequiredArgsConstructor
public class EntryApplication {

    public static void main(String[] args) {
        SpringApplication.run(EntryApplication.class, args);
    }

    private final TradeService tradeService;

    @EventListener(ApplicationReadyEvent.class)
    public void load() {
        AccessTokenInfo accessTokenInfo = new AccessTokenInfo("emailfortestsallan@gmail.com", 1L, "emailfortestsallan", asList("ROLE_USER", "TENANCY_ADMIN"));
        String journalId = "63fce0f359c14d23cf3b22b1";
        List<String> symbols = asList("AAPL", "MSFT", "GOOG", "GOOGL", "AMZN", "UNH", "JNJ", "XOM", "JPM", "WMT", "TSLA", "PG", "NVDA", "LLY", "CVX", "MA", "HD", "META", "PFE",
                "ABBV", "MRK", "KO", "BAC", "PEP", "AVGO", "ORCL", "TMO", "COST", "CSCO", "MCD", "DHR", "ABT", "NKE", "ACN", "TMUS", "NEE", "VZ", "LIN",
                "DIS", "WFC", "ADBE", "PM", "BMY", "UPS", "CMCSA", "SCHW");

        Random rand = new Random();
        for (int i = 12; i < 200; i++) {
            String symbol = symbols.get(rand.nextInt(symbols.size()));
            EntryDirection direction = Arrays.stream(EntryDirection.values()).toList().get(rand.nextInt(EntryDirection.values().length));
            GraphType graph = Arrays.stream(GraphType.values()).toList().get(rand.nextInt(GraphType.values().length));
            EntryResult result = Arrays.stream(EntryResult.values()).toList().get(rand.nextInt(EntryResult.values().length));

            EntryStatus status;
            if (i % 9 == 0) {
                status = EntryStatus.OPEN;
            } else {
                status = EntryStatus.CLOSED;
            }

            LocalDateTime date = getDate(rand, null, LocalDateTime.of(2022, 10, 1, 8, 0, 0));
            LocalDateTime exitDate = getDate(rand, date.plusDays(2), date.plusMinutes(10));

            BigDecimal price = BigDecimal.TEN.add(BigDecimal.valueOf(Math.random()).multiply(BigDecimal.valueOf(1000).subtract(BigDecimal.TEN))).setScale(2, RoundingMode.HALF_EVEN);
            BigDecimal size = BigDecimal.valueOf(rand.nextInt(1, 20)).setScale(2, RoundingMode.HALF_EVEN);

            BigDecimal profit;
            BigDecimal loss;
            BigDecimal costs;

            BigDecimal variant = price.multiply(BigDecimal.valueOf(15)).divide(BigDecimal.valueOf(100), RoundingMode.HALF_EVEN);

            if (EntryDirection.LONG.equals(direction)) {
                profit = price.add(variant).setScale(2, RoundingMode.HALF_EVEN);
                loss = price.subtract(variant.divide(BigDecimal.valueOf(2), RoundingMode.HALF_EVEN)).setScale(2, RoundingMode.HALF_EVEN);
            } else {
                profit = price.subtract(variant).setScale(2, RoundingMode.HALF_EVEN);
                loss = price.add(variant.divide(BigDecimal.valueOf(2), RoundingMode.HALF_EVEN)).setScale(2, RoundingMode.HALF_EVEN);
            }
            costs = price.multiply(BigDecimal.valueOf(0.5)).divide(BigDecimal.valueOf(100), RoundingMode.HALF_EVEN);

            Trade trade = Trade.builder()
                    .date(date)
                    .symbol(symbol)
                    .direction(direction)
                    .price(price)
                    .size(size)
                    .profitPrice(profit)
                    .lossPrice(loss)
                    .costs(costs)
                    .graphType(graph)
                    .build();
            Entry openTrade = tradeService.open(accessTokenInfo, journalId, trade);


            if (EntryStatus.CLOSED.equals(status)) {
                CloseTrade.CloseTradeBuilder closeBuilder = CloseTrade.builder().exitDate(exitDate);
                if (EntryResult.WIN.equals(result)) {
                    closeBuilder.exitPrice(profit);
                } else {
                    closeBuilder.exitPrice(loss);
                }
                CloseTrade close = closeBuilder.build();
                tradeService.close(accessTokenInfo, journalId, openTrade.getId(), close);
            }
        }
    }

    private static LocalDateTime getDate(Random rand, LocalDateTime untilDate, LocalDateTime fromDate) {
        long from = fromDate.toEpochSecond(ZoneOffset.UTC);
        if (untilDate == null) {
            untilDate = LocalDateTime.of(2022, 12, 31, 17, 59, 0);
        }
        long until = untilDate.toEpochSecond(ZoneOffset.UTC);
        long randomDay = rand.nextLong(from, until);
        return LocalDateTime.ofEpochSecond(randomDay, 0, ZoneOffset.UTC);
    }
}
